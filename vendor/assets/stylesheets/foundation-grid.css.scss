// Inspired by https://github.com/twigkit/semantic.gs/blob/master/stylesheets/scss/grid.scss

$screenSmall: 768px !default;
$screenMedium: 1279px !default;
$screenXlarge: 1441px !default;

$rowWidth: 960px;
$columnGutter: 4px;
$totalColumns: 12;
$mobileTotalColumns: 4;
$blockGridElements: 12;

@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

@mixin mobileClearfix() {
  @include respondTo(smallScreen) { &:before, &:after { content: " "; display: table; }
    &:after { clear: both; }
    &:last-child { float: none; }
  }
}

// Mixin for Semantic Grid reponsiveness

@mixin respondTo($media) {
  @if $media == smallScreen {
    @media only screen and (max-width: $screenSmall - 1) { @content; }
  } @else if $media == mediumScreen {
    @media only screen and (max-width: $screenMedium) and (min-width: $screenSmall) { @content; }
  } @else if $media == largeScreen {
    @media only screen and (min-width: $screenXlarge) { @content; }
  }
}

// Outer row mixin for container rows

@mixin outerRow() {
  width: $rowWidth; max-width: 100%; min-width: $screenSmall; margin: 0 auto; @extend %clearfix;
  @include respondTo(smallScreen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; }
}

// Inner row mixin for nested rows, must be a child of an outer-row element. $behavior can be 'collapse' to get rid of margins

@mixin innerRow($behavior: false) {
    @if $behavior == collapse { @extend %row-i-base; margin: 0; @extend %clearfix;
  } @else { @extend %row-i-base; margin: 0 (-($columnGutter/2)); @extend %clearfix; }
}

// Columns mixin, syntax is ($columns, $behavior). Behavior can be 'centered' which centers things or 'collapse' which collapses the gutters. ex @include row(4,[center | collapse])

@mixin column($columns:$columns, $behavior: false) {
  @include box-sizing(border-box);
    @if $behavior == center { @extend %fl-n; margin-left: auto; margin-right: auto; @extend %c-base; width: gridCalc($columns, $totalColumns); @include respondTo(smallScreen) { float: none; width: auto; }
  } @else if $behavior == collapse { @extend %fl-l; @extend %c-base; padding: 0; width: gridCalc($columns, $totalColumns); @include respondTo(smallScreen) { float: none; width: auto; }
  } @else { @extend %fl-l; @extend %c-base; width: gridCalc($columns, $totalColumns); @include respondTo(smallScreen) { float: none; width: auto; } }
}

// Offset Mixin, include after a column mixin to manipulate its grid offset.

@mixin offsetBy($offset:1) { margin-left: gridCalc($offset, $totalColumns); }

// Push/Pull Mixins, include after a column mixin to manipulate stack ordering.

@mixin push($push:1) { left: gridCalc($push, $totalColumns); }
@mixin pull($push:1) { right: gridCalc($push, $totalColumns); }

// We use this mixin to create different block-grids. You can apply per-row and spacing options.
// Setting $base-style to false will ommit default styles.
@mixin block-grid($per-row:false, $h-spacing: em(20px), $v-spacing: $h-spacing, $base-style:true) {
  @if $base-style {
    display: block;
    padding: 0;
    @include inline-block-list;
    margin: 0 (-$h-spacing/2);
    font-size: 0;

    li {
      height: auto;
      font-size: $base-font-size;
      padding: 0 ($h-spacing/2) $v-spacing;
    }
  }

  @if $per-row {
    li {
      width: 100%/$per-row;
      padding: 0 ($h-spacing/2) $v-spacing;
      @include box-sizing(border-box);
    }
  }
}

// Mobile Row, synctax is @include mobile-row(); (This mixin isn't really necessary, will be deprecated in 4)
@mixin mobileRow() { @include respondTo(smallScreen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; @include clearfix(); } }

// Mobile Columns, syntax is @include mobile-column(#);

@mixin mobileColumn($columns:$columns, $behavior: false) {
    @if $behavior == center { @include respondTo(smallScreen) { float: none; margin: 0 auto; position: relative; min-height: 1px; padding: 0 ($columnGutter/2); width: gridCalc($columns, $mobileTotalColumns); }
  } @else if $behavior == collapse { @include respondTo(smallScreen) { float: left; position: relative; min-height: 1px; padding: 0; width: gridCalc($columns, $mobileTotalColumns); }
  } @else { @include respondTo(smallScreen) { float: left; width: gridCalc($columns, $mobileTotalColumns); padding: 0 ($columnGutter/2); } }
}

// Mobile Push/Pull Mixin

@mixin mobilePush($push:1) { @include respondTo(smallScreen) { left: gridCalc($push, $mobileTotalColumns); } }
@mixin mobilePull($push:1) { @include respondTo(smallScreen) { right: gridCalc($push, $mobileTotalColumns); } }

// Invisible Placeholder Classes for Grid
%fl-l { float: left; }
%fl-r { float: right; }
%fl-n { float: none; }

%clearfix { @include clearfix(); }
%clearfix-m { @include mobileClearfix(); }

%row-o { @include outerRow(); }
%row-i-base { width: auto; max-width: none; min-width: 0; }
%row-i { @include innerRow(); }

%c-base { position: relative; min-height: 1px; padding: 0 ($columnGutter/2); }

@for $i from 1 through $totalColumns {
  %c-#{$i} { @include column($i); }
}